#ifndef __ASF_LISTENERS__
#define __ASF_LISTENERS__

#include <asf-namespace.h>
#include <asf-utils.tb>

process ASFModuleRegistrar is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  NewPath: term,
  Idle: term
in
  Idle := no
  . MM-Subscribe-Attribute-Changed(<module-id>,ASF_NAMESPACE,"status",<term>, created) 
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . RegisterASFModule(ModuleId)
  )
  *
  delta
endlet

toolbus(ASFModuleRegistrar)

process ASFSDFSyntaxChecker is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Tree: term,
  Result: term,
  Parents: list
in
  MM-Subscribe-Attribute-Changed(<module-id>,SDF_NAMESPACE,"status",<term>,complete)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . MM-GetModuleParents(ModuleId, Parents?)
    . /* we only check top modules */
    if equal(Parents, []) then
      printf("Checking syntax\n") .
      CheckASFSDFSyntax(ModuleId)
    else
      tau
    fi
  )
  *
  delta
endlet

toolbus(ASFSDFSyntaxChecker)

process ASFModuleChecker is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  NewPath: term,
  Tree: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,ASF_NAMESPACE,"status",dirty,parsed)  
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . CheckASFModule(ModuleId)
  )
  *
  delta
endlet

toolbus(ASFModuleChecker)

/* 
process ASFModuleShapeChanger is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  NewPath: term,
  Tree: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,ASF_NAMESPACE,"status",<term>,dirty)  
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . MM-SetModuleGraphAttribute(ModuleId, "shape", shape(ellipse))
  )
  *
  delta
endlet

toolbus(ASFModuleShapeChanger)
*/

process ASFModuleParser is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  SdfModuleId : module-id,
  Tree: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,ASF_NAMESPACE,"status",<term>, dirty)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . printf("parsing ASF file\n")
    . GetASFParseTree(ModuleId, Tree?)
    .
    if not-equal(Tree, UNDEFINED) then
       printf("ASF parsed\n") .
       MM-SetAttribute(ModuleId, ASF_NAMESPACE, "status", parsed)
    else
       MM-SetAttribute(ModuleId, ASF_NAMESPACE, "status", error)
    fi
    . Tree := UNDEFINED
  )
  *
  delta
endlet 

/* TODO: add syntax checker */

toolbus(ASFModuleParser)

process ASFEditorParser is
let
  Filename : str,
  Contents : str,
  Table : term,
  Tree : term,
  ErrorSummary : term,
  ParseResult : term,
  Annotated : term,
  ModuleId : module-id,
  SdfModuleId : module-id
in
  (
    rec-msg(pc-parse-event(asf, Filename?, Contents?))
    . GetASFModuleId(Filename, ModuleId?)
    . Asf2SdfId(ModuleId, SdfModuleId?)
    . printf("received pc-parse-event for asf\n")
    . GetParseTable(SdfModuleId, asf, Table?)
    .
    if not-equal(Table, UNDEFINED) then
      snd-msg(sglr-parse(Contents, Table, ASF_TOPSORT, on))
      .
      (
        rec-msg(sglr-parse-tree(ParseResult?, ErrorSummary?))
        . AnnotateTree(ParseResult, Filename, Annotated?)
        . snd-msg(pc-parse-result(asf, Filename, ParseResult, ErrorSummary))
      +
        rec-msg(sglr-parse-error(ErrorSummary?))
        . snd-msg(pc-parse-error(asf, Filename, ErrorSummary))
      )
    else
       snd-msg(pc-parse-error(asf, Filename, summary("sdf-parser",Filename,[])))
    fi
  ) * delta
endlet

toolbus(ASFEditorParser)

#endif /* __ASF_LISTENERS__ */
