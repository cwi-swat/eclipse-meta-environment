#ifndef __ASF_EDITOR_ACTIONS__
#define __ASF_EDITOR_ACTIONS__

#include <sdf-namespace.h>
#include <asf-namespace.h>
#include <term-namespace.h>
#include <module-manager.tb>
#include <module-utils.tb>
#include <asf-editor-utils.tb>
#include <error-viewer.idef>
#include <asf-pretty-print.tb>

process EditorEditEquationsAction(Filename: str, Language: str) is
let 
  ModuleId : module-id
in
  GetOrCreateModule(SDF_NAMESPACE, Filename, ModuleId?)
  . EditEquationsAction(ModuleId)
endlet

process EditEquationsAction(ModuleId : module-id) is
let
  Pid: int
in
  create(EditEquations(ModuleId), Pid?)
endlet


process ReduceAction(Filename: str, Language: str) is
let 
  ModuleId : module-id
in
  GetOrCreateModule(TERM_NAMESPACE, Filename, ModuleId?)
  . ReduceMyTerm(ModuleId, Filename, false)
endlet

process CheckAction(Path: str, Language : str) is
let
  TermModuleId : module-id,
  SdfModuleId : module-id,
  RunModuleId : module-id,
  ResultTree: term,
  Summary: summary
in
  GetOrCreateModule(TERM_NAMESPACE, Path, TermModuleId?)
  . TermToSdfModuleId(TermModuleId, SdfModuleId?)
  . LookupFeatureModuleId(SdfModuleId,  "check", RunModuleId?)
  .
  if not-equal(RunModuleId, UNDEFINED) then
    AddJob("Checking")
    . Reduce(RunModuleId, Path, off, ResultTree?)
    . 
    if not-equal(ResultTree, UNDEFINED) then
      snd-msg(convert-feedback(ResultTree))
      . rec-msg(converted-feedback(Summary?))
      . RefreshSummary(Summary)
    else
      tau
    fi
    . JobDone("Checking")
  else
    tau
  fi
endlet

process RunAction(Path: str, Language : str) is
let
  TermModuleId : module-id,
  SdfModuleId : module-id,
  RunModuleId : module-id,
  ResultTree: term,
  Sid: session-id,
  Pid: int,
  File: str,
  Text : str
in
  GetOrCreateModule(TERM_NAMESPACE, Path, TermModuleId?)
  . TermToSdfModuleId(TermModuleId, SdfModuleId?)
  . LookupFeatureModuleId(SdfModuleId,  "run", RunModuleId?)
  .
  if not-equal(RunModuleId, UNDEFINED) then
    File := concat(Path, "-run.trm")
    . AddJob("Running")
    . Reduce(RunModuleId, Path, off, ResultTree?)
    . 
    if not-equal(ResultTree, UNDEFINED) then
      snd-msg(unparse(ResultTree))
      . rec-msg(unparsed-text(Text?))
      . snd-msg(et-edit-term(File, TERM_NAMESPACE, Text))
    else
      tau
    fi
    . JobDone("Running")
  else
    tau
  fi
endlet

process ExtractAction(Path: str, Language : str) is
let
  TermModuleId : module-id,
  SdfModuleId : module-id,
  ExtractModuleId : module-id,
  ResultTree: term,
  Pid: int,
  Language: str,
  ModuleName: str,
  RSId: int
in
  GetOrCreateModule(TERM_NAMESPACE, Path, TermModuleId?)
  . TermToSdfModuleId(TermModuleId, SdfModuleId?)
  . LookupFeatureModuleId(SdfModuleId, "extract", ExtractModuleId?)
  .
  if not-equal(ExtractModuleId, UNDEFINED) then
    MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", ModuleName?)
    . ComputeCanonicalLanguagename(ModuleName, Language?)
    . AddJob("Extracting")
    . Reduce(ExtractModuleId, Path, off, ResultTree?)
    . 
    if not-equal(ResultTree, UNDEFINED) then
      snd-msg(rs-lower-rstore(ResultTree))
      . rec-msg(rs-lowered-rstore(ResultTree?))
      . snd-msg(rc-load-rstore(Path, ResultTree))
    else
      snd-note(extract-rstore-failed(Language, Path))
    fi
    . JobDone("Extracting")
  else
    tau
  fi
endlet

process TestAction(Path: str, Language : str) is
let
  TermModuleId : module-id,
  SdfModuleId : module-id,
  RunModuleId : module-id,
  ResultTree: term,
  Summary: summary
in
  GetOrCreateModule(TERM_NAMESPACE, Path, TermModuleId?)
  . TermToSdfModuleId(TermModuleId, SdfModuleId?)
  . LookupFeatureModuleId(SdfModuleId,  "test", RunModuleId?)
  .
  if not-equal(RunModuleId, UNDEFINED) then
    AddJob("Testing")
    . Reduce(RunModuleId, Path, off, ResultTree?)
    . 
    if not-equal(ResultTree, UNDEFINED) then
      snd-msg(convert-feedback(ResultTree))
      . rec-msg(converted-feedback(Summary?))
      . RefreshSummary(Summary)
    else
      tau
    fi
    . JobDone("Testing")
  else
    tau
  fi
endlet

process PrettyPrintTermAction(Path: str, Language : str) is
let
  Tree : term,
  RTree : term,
  SdfModuleId: module-id,
  TermModuleId : module-id,
  Path: str,
  Text : str
in
  GetOrCreateModule(TERM_NAMESPACE, Path, TermModuleId?)
  . TermToSdfModuleId(TermModuleId, SdfModuleId?)
  . GetTermParsetree(SdfModuleId, Path, Tree?)
  .
  if not-equal(Tree, UNDEFINED) then
    BoxAndPrettyPrint(SdfModuleId, Path, Tree, RTree?)
    . 
    if not-equal(RTree, UNDEFINED) then
      snd-msg(unparse(RTree))
      . rec-msg(unparsed-text(Text?))
      . snd-msg(et-edit-term(Path, TERM_NAMESPACE, Text))
    else 
      tau
    fi
  else tau
  fi
endlet


#endif /* __ASF_EDITOR_ACTIONS__ */