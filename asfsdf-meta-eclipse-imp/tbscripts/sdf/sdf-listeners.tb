#ifndef __SDF_LISTENERS__
#define __SDF_LISTENERS__

#include <meta-namespace.h>
#include <module-manager.tb>
#include <sdf-namespace.h>
#include <graph-namespace.h>
#include <extract-sdf.idef>
#include <term-listeners.tb>
#include <module-utils.tb>
#include <sdf-utils.tb>
#include <error-viewer.idef>
#include <parsetable-utils.tb>
#include <term-utils.tb>

#define BG_ERROR_COLOR rgb(224,64,60)
#define BG_CHILD_ERROR_COLOR rgb(255,128,114)
#define BG_CORRECT_COLOR rgb(255,255,221)
#define BG_GRAYED_OUT rgb (211,211,211)

#define MODULE_OPENED set(SDF_NAMESPACE, "status", opened)
#define MODULE_ERROR set(SDF_NAMESPACE, "status", error)
#define MODULE_UNAVAILABLE set(SDF_NAMESPACE, "status", unavailable)
#define MODULE_IDLE or(MODULE_OPENED,or(MODULE_UNAVAILABLE,MODULE_ERROR))
#define ALL_MODULES_IDLE and(MODULE_IDLE, all(MODULE_IDLE))

process InitializeInheritedStatus is
  /* the first one must not have any <term> holes because of a ToolBus bug */
  
  /* Once we are opened and our kids are opened, then we become complete */
  MM-RegisterAttributeUpdateRule(SDF_NAMESPACE, "status", and(set(SDF_NAMESPACE, "status", opened),all(set(SDF_NAMESPACE, "status", opened))), complete)

  /* When we are not in error and one of our kids has an error, we become child-error */
  . MM-RegisterAttributeUpdateRule(SDF_NAMESPACE, "status", and(not(set(SDF_NAMESPACE, "status", error)), one(set(SDF_NAMESPACE, "status", error))), child-error)

  . MM-RegisterAttributeUpdateRule(META_NAMESPACE, "idle", ALL_MODULES_IDLE, yes)

toolbus(InitializeInheritedStatus)

process SDFModuleParser is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Tree: term,
  Pid: int
in
  MM-Subscribe-Attribute-Changed(<module-id>,SDF_NAMESPACE,"status",<term>,created)
  . MM-Subscribe-Attribute-Changed(<module-id>,SDF_NAMESPACE,"status",<term>,dirty) 
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . printf("parsing module %t\n", ModuleId)
    . GetSDFParsetree(ModuleId, Tree?)
    .
    if equal(Tree, UNDEFINED) then
       printf("Module %t parse error\n", ModuleId) .
       MM-SetAttribute(ModuleId, SDF_NAMESPACE, "status", error)
    else
       printf("Module %t parsed\n", ModuleId) .
       MM-SetAttribute(ModuleId, SDF_NAMESPACE, "status", parsed)
    fi
    . Tree := UNDEFINED
  )
  *
  delta
endlet

toolbus(SDFModuleParser)

process SDFModuleIdentifier is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Tree: term,
  Result: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,SDF_NAMESPACE,"status",<term>,parsed)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . SDFIdentifyModule(ModuleId, Result?)
    . MM-SetAttribute(ModuleId, SDF_NAMESPACE, "status", Result)
  )
  *
  delta
endlet

toolbus(SDFModuleIdentifier)

process SDFSetModuleImports is
let
  Event: attribute-changed-event,
  Import: str,
  ImportId: module-id,
  Imports: list,
  ModuleId: module-id,
  Tree: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,SDF_NAMESPACE,"status",<term>,identified)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetModuleId(Event, ModuleId?)
    . MM-SetAttribute(ModuleId, SDF_NAMESPACE, "status", opening)
    . GetSDFParsetree(ModuleId, Tree?)
    . MM-GetModuleDependencies(ModuleId, Imports?)
    . 
    if not-equal(Imports, []) then
      MM-DeleteModuleDependencies(ModuleId)
    else
      tau
    fi
    . GetImportedModulenames(Tree, Imports?)
    .
    if not-equal(Imports, []) then 
      if not-equal(Imports, []) then 
        Import := first(Imports)
        . Imports := next(Imports)
        . OpenModule(Import, ImportId?)
        . MM-AddModuleDependency(ModuleId, ImportId)
      fi
      *
      if equal(Imports, []) then
        MM-SetAttribute(ModuleId, SDF_NAMESPACE, "status", opened)
      fi
    else
      MM-SetAttribute(ModuleId, SDF_NAMESPACE, "status", opened) 
    fi
  )
  *
  delta
endlet

toolbus(SDFSetModuleImports)

process SDFRemoveDependencies is
let
  Event: attribute-changed-event,
  ModuleId: module-id,
  Value: term
in
  MM-Subscribe-Attribute-Changed(<module-id>,SDF_NAMESPACE,"status",<term>,unknown)
  .
  (
    rec-note(mm-attribute-changed(Event?))
    . ACE-GetOldValue(Event, Value?)
    .
    if not-equal(Value, undefined) then
      ACE-GetModuleId(Event, ModuleId?)
      . MM-DeleteModuleDependencies(ModuleId)
    else
      tau
    fi
  )
  *
  delta
endlet

toolbus(SDFRemoveDependencies)

process SDFEditorParser is
let
  Filename : str,
  Contents : str,
  Table : term,
  Tree : term,
  ErrorSummary : term,
  ParseResult : term,
  Annotated : term,
  ModuleId : module-id
in
  (
    rec-msg(pc-parse-event(SDF_NAMESPACE, Filename?, Contents?))
    . printf("received pc-parse-event for sdf\n")
    . GetOrCreateModule(SDF_NAMESPACE, Filename, ModuleId?)
    . GetParseTable(ModuleId, SDF_NAMESPACE, Table?)
    .
    if not-equal(Table, UNDEFINED) then
      snd-msg(sglr-parse(Contents, Table, "", off))
      .
      (
        rec-msg(sglr-parse-tree(ParseResult?, ErrorSummary?))
        . AnnotateTree(ParseResult, Filename, Annotated?)
        . snd-msg(pc-parse-result(SDF_NAMESPACE, Filename, ParseResult, ErrorSummary))
        . printf("sent SDF_NAMESPACE parse result\n")
      +
        rec-msg(sglr-parse-error(ErrorSummary?))
        . snd-msg(pc-parse-error(SDF_NAMESPACE, Filename, ErrorSummary))
        . printf("sent sdf parse error\n")
      )
    else
       snd-msg(pc-parse-error(SDF_NAMESPACE, Filename, summary("sdf-parser",Filename,[])))
       . printf("sent sdf parse error\n")
    fi
  ) * delta
endlet

toolbus(SDFEditorParser)



#endif /* __SDF_LISTENERS__ */
