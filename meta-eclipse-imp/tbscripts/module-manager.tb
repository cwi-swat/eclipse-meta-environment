#ifndef __MODULE_MANAGER__
#define __MODULE_MANAGER__

#include <module-manager.idef>
#include <attribute-changed-event.tb> 
#include <dependencies-changed-event.tb>
#include <undefined.h>
#include <graph-namespace.h>

process MM-RegisterAttributeUpdateRule(Namespace: str, Key: term, Rule: term, Value: term) is
  snd-msg(mm-register-attribute-update-rule(Namespace, Key, Rule, Value))

process MM-NotifyAboutChangedAttributes is
let
  Event: attribute-changed-event,
  Namespace: str,
  Key: term,
  OldValue: term,
  NewValue: term,
  ModuleId: str
in
  (
    rec-msg(mm-attribute-changed(ModuleId?, Namespace?, Key?, OldValue?, NewValue?))
    . ACE-MakeEvent(ModuleId, Namespace, Key, OldValue, NewValue, Event?)
    . snd-note(mm-attribute-changed(Event))
  ) * delta
endlet

toolbus(MM-NotifyAboutChangedAttributes)

process MM-CreateModule(Path : str, ModuleId: str?) is
  snd-msg(mm-create-module(Path))
  . rec-msg(mm-module-created(ModuleId?))
  . snd-note(mm-module-created(ModuleId))

process MM-GetModuleIdByAttribute(Namespace: str, Key: term, Value: term, ModuleId: str?) is
  snd-msg(mm-get-module-id-by-attribute(Namespace, Key, Value))
  .
  (
    rec-msg(mm-module-id(Namespace, Key, Value, ModuleId?))
  +
    rec-msg(mm-no-such-module(Namespace, Key, Value))
    . ModuleId := UNDEFINED 
  )

process MM-GetAllModules(Modules: list?) is
  snd-msg(mm-get-all-modules)
  . rec-msg(mm-modules(Modules?))

process MM-DeleteModule(ModuleId: str) is
  snd-msg(mm-delete-module(ModuleId))
  . snd-note(mm-module-deleted(ModuleId))

process MM-SetAttribute(ModuleId: str, Namespace: str, Key: term, Value: term) is
  snd-msg(mm-add-attribute(ModuleId, Namespace, Key, Value))

process MM-HasAttribute(ModuleId: str, Namespace: str, Key: term, HasAttribute: bool?) is
let
  Value: term
in
  snd-msg(mm-get-attribute(ModuleId, Namespace, Key))
  .
  (
    rec-msg(mm-attribute(ModuleId, Namespace, Key, Value?))
    . HasAttribute := true
  +
    rec-msg(mm-no-such-module(ModuleId, Namespace, Key))
    . HasAttribute := false
  +
    rec-msg(mm-no-such-key(ModuleId, Namespace, Key))
    . HasAttribute := false
  )
endlet

process MM-GetAttribute(ModuleId: str, Namespace: str, Key: term, Value: term?) is
  snd-msg(mm-get-attribute(ModuleId, Namespace, Key))
  .
  (
    rec-msg(mm-attribute(ModuleId, Namespace, Key, Value?))
  +
    rec-msg(mm-no-such-module(ModuleId, Namespace, Key))
    . printf("module-manager - MM-GetAttribute: Unregistered moduleid exception\n")
    . printf("ModuleId: [%t], Namespace: [%t], Key: [%t]\n", ModuleId, Namespace, Key)
    . Value := UNDEFINED
  + 
    rec-msg(mm-no-such-key(ModuleId, Namespace, Key))
    . printf("module-manager - MM-GetAttribute: Unregistered key exception\n")
    . printf("ModuleId: [%t], Namespace: [%t], Key: [%t]\n", ModuleId, Namespace, Key)
    . Value := UNDEFINED
  )

process MM-AddModuleDependency(ModuleId: str, Dependency: str) is
let
  Event: dependencies-changed-event
in
  snd-msg(mm-add-dependency(ModuleId, Dependency))
  . DCE-MakeEvent(ModuleId, Event?)
  . snd-note(mm-dependencies-changed(Event))
endlet

process MM-GetModuleDependencies(ModuleId: str, Dependencies: list?) is
  snd-msg(mm-get-children-modules(ModuleId))
  .
  (
    rec-msg(mm-children-modules(ModuleId, Dependencies?))
  +
    rec-msg(mm-no-such-module(ModuleId))
    . Dependencies := UNDEFINED
  )

process MM-GetAllModuleDependencies(ModuleId: str, Dependencies: list?) is
  snd-msg(mm-get-all-children-modules(ModuleId))
  .
  (
    rec-msg(mm-all-children-modules(ModuleId, Dependencies?))
  +
    rec-msg(mm-no-such-module(ModuleId))
    . Dependencies := []
  )

process MM-GetModuleParents(ModuleId: str, Parents: list?) is
  snd-msg(mm-get-parent-modules(ModuleId))
  .
  (
    rec-msg(mm-parent-modules(ModuleId, Parents?))
  +
    rec-msg(mm-no-such-module(ModuleId))
    . Parents := []
  )

process MM-DeleteModuleDependencies(ModuleId: str) is
let
  Event: dependencies-changed-event
in
  snd-msg(mm-delete-dependencies(ModuleId))
  . DCE-MakeEvent(ModuleId, Event?)
  . snd-note(mm-dependencies-changed(Event))
endlet

process MM-Subscribe-Attribute-Changed(ModuleId: str, Namespace: str, Key: term, OldValue: term, NewValue: term) is
  subscribe(mm-attribute-changed(attribute-changed-event(ModuleId, Namespace, Key, OldValue, NewValue)))

process MM-Subscribe-Dependencies-Changed(ModuleId: str) is
  subscribe(mm-dependencies-changed(dependencies-changed-event(ModuleId)))

#endif /* __MODULE_MANAGER__ */
