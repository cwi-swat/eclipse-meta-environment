#ifndef __PARSETABLE_UTILS__
#define __PARSETABLE_UTILS__

#include <cache-utils.tb>
#include <parsetablegen.idef>
#include <sdf-namespace.h>

process GetParseTable(ModuleId: module-id, Type: str, Table: term?) is
let
  Error: term
in
  printf("want to send: get-parsetable(%t, %t)\n", ModuleId, Type) .
  snd-msg(get-parsetable(ModuleId, Type))
  .
  (
    rec-msg(parsetable(ModuleId, Type, Table?))
    . printf("GetParseTable received a table\n")
  +
    rec-msg(no-parsetable(ModuleId, Type))
    . printf("GetParseTable received no table at all\n")
    . Table := UNDEFINED
  )
endlet

/* BuildParseTable is started somewhere else, such that a specific
 * PreprocessSyntaxHandler can be bound for specific types of languages
 */
process BuildParsetable(TableName: str, Namespace: str, Type: str, PreprocessSyntaxHandler: str) is
let
  ModuleId: module-id,
  Syntax: term,
  Table: term,
  Modulename: str,
  NewSyntax: term,
  Pid: int,
  SdfPath: str,
  Ext : str
in
  Ext := concat(".", concat(Type, ".tbl"))
  . printf("waiting for get-parsetable(ModuleId?, %t)\n", Type)
  .
  (
    rec-msg(get-parsetable(ModuleId?, Type))
    . printf("rec-msg(get-parsetable(%s, %s))\n", ModuleId,Type)
    . GetModulePath(ModuleId, SDF_NAMESPACE, SdfPath?)
    . GetCachedValue(Ext, SdfPath, Table?)
    .
    if equal(Table, UNDEFINED) then
      AddJob("Generating parser")
      . snd-msg(tm-request-transaction(syntax-definition))
      . GetSyntaxDefinition(ModuleId, Syntax?)
      . snd-msg(tm-end-transaction(syntax-definition))
      . 
      if not-equal(Syntax, UNDEFINED) then
	MM-GetAttribute(ModuleId, Namespace, "name", Modulename?)
        . PreprocessSyntaxHandler(Modulename, Syntax, NewSyntax?)
	. GenerateParsetable(Modulename, NewSyntax, Table?)
	.
	if not-equal(Table, UNDEFINED) then
	  PutCachedValue(SdfPath, Ext, Table)
	  . snd-msg(parsetable(ModuleId, Type, Table))
	else
	  printf("generation of parse table failed\n") .
	  snd-msg(no-parsetable(ModuleId, Type))
	fi
      else
      printf("collection of syntax definition failed\n") .
	snd-msg(no-parsetable(ModuleId, Type))
      fi
      . JobDone("Generating parser")
    else
      snd-msg(parsetable(ModuleId, Type, Table))
    fi 
  )
  * delta
endlet

process GenerateParsetable(Modulename: str, Syntax: term, Table: term?) is
  snd-msg(generate-parsetable(Syntax, Modulename))
  . 
  (
    rec-msg(parsetable(Table?))
  +
    rec-msg(no-parsetable)
    . Table := UNDEFINED
  )

#endif /* __PARSETABLE_UTILS__ */
